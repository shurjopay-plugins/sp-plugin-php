<?php

namespace ShurjopayPlugin;

use ShurjopayPlugin\ShurjopayValidation;

require_once 'ShurjopayException.php';
require_once 'ShurjopayConfig.php';
require_once 'ShurjopayValidation.php';

/**
 * PHP plugin class to connect and integrate with shurjoPay payment gateway API.
 * There are three mandatory public functions which will need to access shurjoPay.<br>
 * 1. authenticate()-> makes client authenticate
 * 2. makePayment()-> generates payment url for checkout
 * 3. verifyPayment()-> makes payment verification
 * prepareCurlRequest, prepareTransactionPayload & logInfo() are internally.
 *
 * @author Md Wali Mosnad Ayshik
 * @author Rayhan khan Ridoy
 * @since 2022-10-15
 */
class Shurjopay
{
    /** shurjopay payment gateway API endpoint */
    private $LOG_LOCATION;
    private $LOG_FILE;
    private $SP_TOKEN;
    private $SP_STORE;

    public function __construct()
    {
        $this->authentication_url = SHURJOPAY_API . "api/get_token";
        $this->checkout_url = SHURJOPAY_API . "api/secret-pay";
        $this->verification_url = SHURJOPAY_API . "api/verification";
    }

    public function authenticate()
    {
        if (empty(SP_USERNAME) || empty(SP_PASSWORD)) {
            $this->sp_log("Authentication process can not continue as username or password is empty");
            exit("Authentication process can not continue as username or password is empty");
        }

        $postFields = array('username' => SP_USERNAME, 'password' => SP_PASSWORD);

        $response = $this->getHttpResponse($this->authentication_url, 'POST', $postFields, array(''));
        if (!$response) {
            $this->sp_log("Authentication failed");
            return null;
        }
        $response = json_decode(json_encode($response), true);
        $this->sp_log("Token generated Successfully");
        $this->SP_TOKEN = $response['token'];
        $this->SP_STORE = $response['store_id'];
        return $this->SP_TOKEN;
    }

    public function makePayment(PaymentRequest $payload)
    {
        $ShurjopayValidation = new ShurjopayValidation();


        if (!$ShurjopayValidation->checkInternetConnection()) {

            exit("Your have no internet connection! Please check your internet connection.");
        }
        $this->check_token("Payment process can not continue as no authentication token is available");

        $trxn_data = $this->prepareTransactionPayload($payload);
        #All data from payload in trxn_data as array.

        if ($ShurjopayValidation->Validation($trxn_data)) {
            $header = array(
                'Content-Type:application/json',
                'Authorization: Bearer ' . json_decode($trxn_data)->token
            );

            try {
                $response = $this->getHttpResponse($this->checkout_url, 'POST', $trxn_data, $header);
                #send all requried data to prepareCurlRequest
                if (!empty($response->checkout_url)) {
                    $this->sp_log("Payment URL has been generated by shurjoPay!");
                    header('Location: ' . $response->checkout_url);
                    exit;
                    #redirecting to checkout_url of shurjoPay.
                } else {
                    return $response; //object
                }
            }
            # Catching ShurjopayException custom exception and throwing it to ShurjopayException
            catch (ShurjopayException $e) {
                $this->sp_log("ShurjopayException occured in makePayment()!" . ". \n" . $e->getMessage());
                throw new ShurjopayException("Please solve the ShurjopayException to make your payment,first", 0, $e);
            }
            # Catching BadMethodCallException custom exception and throwing it to ShurjopayException
            catch (\BadMethodCallException $e) {
                $this->sp_log("BadMethodCallException occured in makePayment()!" . ". \n" . $e->getMessage());
                throw new ShurjopayException("Please make your method name correct,first", 0, $e);
            }
            # Catching ArgumentCountError custom exception and throwing it to ShurjopayException
            catch (\ArgumentCountError $e) {
                $this->sp_log("ArgumentCountError occured in makePayment()!" . ". \n" . $e->getMessage());
                throw new ShurjopayException("Please make sure you are passing correct number of arguments,first", 0, $e);
            }
            # Catching InvalidArgumentException custom exception and throwing it to ShurjopayException
            catch (\InvalidArgumentException $e) {
                $this->sp_log("InvalidArgumentException occured in makePayment()!" . ". \n" . $e->getMessage());
                throw new ShurjopayException("Please make sure you are passing correct type of arguments,first", 0, $e);
            }
            # Catching mother exception if child exception class doesn't catch
            catch (\Exception $e) {
                $this->sp_log("Exception occured in makePayment()!" . ". \n" . $e->getMessage());
                throw new ShurjopayException("Please solve the issue to make your payment,first", 0, $e);
            }
            # Catching fatal error if problem doesn't belongs in exception class
            catch (\Error $e) {
                $this->sp_log("Fatal error occured in makePayment()!" . ". \n" . $e->getMessage());
                throw new ShurjopayException("Please solve the error to make your payment,first", 0, $e);
            }
        }
    }

    private function check_token($msg)
    {
        if (!$this->SP_TOKEN) {
            $this->SP_TOKEN = $this->authenticate();
            if (!$this->SP_TOKEN) {
                $this->sp_log($msg);
                exit($msg);
            }
        }
        return true;
    }

    public function verifyPayment($shurjopay_order_id)
    {
        $this->check_token("Verification process can not continue as no authentication token is available");
        $header = array(
            'Content-Type:application/json',
            'Authorization: Bearer ' . $this->SP_TOKEN
        );
        $postFields = json_encode(array('order_id' => $shurjopay_order_id));
        try {
            $response = $this->getHttpResponse($this->verification_url, 'POST', $postFields, $header);
            $this->sp_log("Payment verification for " . $shurjopay_order_id . " was done successfully");
            return $response;
        }
        # Catching ShurjopayException custom exception and throwing it to ShurjopayException
        catch (ShurjopayException $e) {
            $this->sp_log("ShurjopayException occured in verifyPayment()!" . ". \n" . $e->getMessage());
            throw new ShurjopayException("Please solve the ShurjopayException to make your payment,first", 0, $e);
        }
        # Catching BadMethodCallException custom exception and throwing it to ShurjopayException
        catch (\BadMethodCallException $e) {
            $this->sp_log("BadMethodCallException occured in verifyPayment()!" . ". \n" . $e->getMessage());
            throw new ShurjopayException("Please make your method name correct,first", 0, $e);
        }
        # Catching ArgumentCountError custom exception and throwing it to ShurjopayException
        catch (\ArgumentCountError $e) {
            $this->sp_log("ArgumentCountError occured in verifyPayment()!" . ". \n" . $e->getMessage());
            throw new ShurjopayException("Please make sure your are passing correct number of arguments,first", 0, $e);
        }
        # Catching InvalidArgumentException custom exception and throwing it to ShurjopayException
        catch (\InvalidArgumentException $e) {
            $this->sp_log("InvalidArgumentException occured in verifyPayment()!" . ". \n" . $e->getMessage());
            throw new ShurjopayException("Please make sure your are passing correct type of arguments,first", 0, $e);
        }
        # Catching mother exception if child exception class doesn't catch
        catch (\Exception $e) {
            $this->sp_log("Exception occured in verifyPayment()!" . ". \n" . $e->getMessage());
            throw new ShurjopayException("Please solve the issue to make your payment,first", 0, $e);
        }
        # Catching fatal error if problem doesn't belongs in exception class
        catch (\Error $e) {
            $this->sp_log("Fatal error occured in verifyPayment()!" . ". \n" . $e->getMessage());
            throw new ShurjopayException("Please solve the error to make your payment,first", 0, $e);
        }
    }

    public function prepareTransactionPayload($payload)
    {

        return json_encode(
            array(
                # store information
                'token' => $this->SP_TOKEN,
                'store_id' => $this->SP_STORE,
                'prefix' => SP_PREFIX,
                'currency' => $payload->currency,
                'return_url' => SP_CALLBACK,
                'cancel_url' => SP_CALLBACK,
                'amount' => $payload->amount,
                # Order information
                'order_id' => SP_PREFIX . uniqid(),
                'discsount_amount' => $payload->discountAmount,
                'disc_percent' => $payload->discPercent,
                # Customer information
                'client_ip' => $_SERVER['REMOTE_ADDR'] ?: ($_SERVER['HTTP_X_FORWARDED_FOR'] ?: $_SERVER['HTTP_CLIENT_IP']),
                'customer_name' => $payload->customerName,
                'customer_phone' => $payload->customerPhone,
                'customer_email' => $payload->customerEmail,
                'customer_address' => $payload->customerAddress,
                'customer_city' => $payload->customerCity,
                'customer_state' => $payload->customerState,
                'customer_postcode' => $payload->customerPostcode,
                'customer_country' => $payload->customerCountry,
                'shipping_address' => $payload->shippingAddress,
                'shipping_city' => $payload->shippingCity,
                'shipping_country' => $payload->shippingCountry,
                'received_person_name' => $payload->receivedPersonName,
                'shipping_phone_number' => $payload->shippingPhoneNumber,
                'value1' => $payload->value1,
                'value2' => $payload->value2,
                'value3' => $payload->value3,
                'value4' => $payload->value4
            )
        );
    }

    /**
     * Prepare and send HTTP requests using curl library and process response.
     *
     * @param $url Destination URL
     * @param $method POST or GET
     * @param $payload_data
     * @param $header Header options
     * @return mixed
     */
    public function getHttpResponse($url, $method, $payload_data, $header)
    {
        try {
            $curl = curl_init();
            curl_setopt_array(
                $curl,
                array(
                    CURLOPT_URL => $url,
                    CURLOPT_HTTPHEADER => $header,
                    CURLOPT_POST => 1,
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_POSTFIELDS => $payload_data,
                    CURLOPT_CUSTOMREQUEST => $method,
                    CURLOPT_ENCODING => '',
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    #If HTTPS not working in local project
                    #Please Uncomment |CURLOPT_SSL_VERIFYPEER|
                    #NOTE-Please Comment Again before going Live
                    //CURLOPT_SSL_VERIFYPEER => 0,
                )
            );
            $response = curl_exec($curl);
            return (json_decode($response));
        }
        # Catching ShurjopayException custom exception and throwing it to ShurjopayException
        catch (ShurjopayException $e) {
            $this->sp_log("ShurjopayException occured in getHttpResponse()!".". \n" . $e->getMessage());
            throw new ShurjopayException("Please solve the ShurjopayException to make your payment,first", 0, $e);
        }
        # Catching BadMethodCallException custom exception and throwing it to ShurjopayException
        catch (\BadMethodCallException $e) {
            $this->sp_log("BadMethodCallException occured in getHttpResponse()!".". \n" . $e->getMessage());
            throw new ShurjopayException("Please make your method name correct,first", 0, $e);
        }
        # Catching ArgumentCountError custom exception and throwing it to ShurjopayException
        catch (\ArgumentCountError $e) {
            $this->sp_log("ArgumentCountError occured in getHttpResponse()!". ". \n" . $e->getMessage());
            throw new ShurjopayException("Please make sure you are passing correct number of arguments,first", 0, $e);
        }
        # Catching InvalidArgumentException custom exception and throwing it to ShurjopayException
        catch (\InvalidArgumentException $e) {
            $this->sp_log("InvalidArgumentException occured in getHttpResponse()!".". \n" . $e->getMessage());
            throw new ShurjopayException("Please make sure you are passing correct type of arguments,first", 0, $e);
        }
        # Catching mother exception if child exception class doesn't catch
        catch (\Exception $e) {
            $this->sp_log("Exception occured in getHttpResponse()!".". \n" . $e->getMessage());
            throw new ShurjopayException("Please solve the issue to make your payment,first", 0, $e);
        }
        # Catching fatal error if problem doesn't belongs in exception class
        catch (\Error $e) {
            $this->sp_log("Fatal error occured in getHttpResponse()!". ". \n" . $e->getMessage());
            throw new ShurjopayException("Please solve the error to make your payment,first", 0, $e);
        }
        finally {
            curl_close($curl);
        }
        return null;
    }

    public function sp_log($log_msg)
    {
        /**-Function-sp_log
        This function is used to create log and make derectory if not exist.
         */

        try {
            #file_put_contents takes care of opening the file, writing the contents, and closing the file.
            $log_file_data = SP_LOG_LOCATION . '/shurjoPay-plugin.log';
            $log_msg_first = gmdate('Y-m-d H:i:s') . " ShurjopayPlugin: " . $log_msg;

            if (!file_exists(SP_LOG_LOCATION)) {
                mkdir(SP_LOG_LOCATION, 0755, true);
                file_put_contents($log_file_data, $log_msg_first . "\n", FILE_APPEND);
            }

            file_put_contents($log_file_data, $log_msg_first . "\n", FILE_APPEND);
        }  # Catching ShurjopayException custom exception and throwing it to ShurjopayException
        catch (ShurjopayException $e) {
            $this->sp_log("ShurjopayException occured in sp_log()!" . ". \n" . $e->getMessage());
            throw new ShurjopayException("Please solve the ShurjopayException to make your payment,first", 0, $e);
        }
        # Catching BadMethodCallException custom exception and throwing it to ShurjopayException
        catch (\BadMethodCallException $e) {
            $this->sp_log("BadMethodCallException occured in sp_log()!" . ". \n" . $e->getMessage());
            throw new ShurjopayException("Please make your method name correct,first", 0, $e);
        }
        # Catching ArgumentCountError custom exception and throwing it to ShurjopayException
        catch (\ArgumentCountError $e) {
            $this->sp_log("ArgumentCountError occured in sp_log()!" . ". \n" . $e->getMessage());
            throw new ShurjopayException("Please make sure you are passing correct number of arguments,first", 0, $e);
        }
        # Catching InvalidArgumentException custom exception and throwing it to ShurjopayException
        catch (\InvalidArgumentException $e) {
            $this->sp_log("InvalidArgumentException occured in sp_log()!" . ". \n" . $e->getMessage());
            throw new ShurjopayException("Please make sure you are passing correct type of arguments,first", 0, $e);
        }
        # Catching mother exception if child exception class doesn't catch
        catch (\Exception $e) {
            $this->sp_log("Exception occured in sp_log()!" . ". \n" . $e->getMessage());
            throw new ShurjopayException("Please solve the issue to make your payment,first", 0, $e);
        }
        # Catching fatal error if problem doesn't belongs in exception class
        catch (\Error $e) {
            $this->sp_log("Fatal error occured in sp_log()!" . ". \n" . $e->getMessage());
            throw new ShurjopayException("Please solve the error to make your payment,first", 0, $e);
        }
    }
}
